const {
  currentDate,
  authorFullName,
  authorDevCode,
} = require("./variables.js");

const replacements = {
  entityName: "EntityName",
};

const templateAuto = `/*
* Description: This file is used to define the data repository for the {{entityName}} entity.
* This file is generated by the JFW Code Generator from a template file.
* If you want to modify this file content, you should modify the template file instead.
* Author: ${authorFullName}.
* History:
* - ${currentDate}: Created - ${authorDevCode}.
*/

using System.Data;
using Jfw.Models;
using Jfw.Models.Entities.Implements;
using Jfw.Models.Entities.Interfaces;

namespace Jfw.DataAccess.Implements
{
    /// <summary>
    /// Provides methods to interact with the {{entityName}} table via stored procedures.
    /// </summary>
    public partial class {{entityName}}Dao : BaseDao<I{{entityName}}Entity>
    {
        /// <summary>
        /// The default constructor.
        /// </summary>
        public {{entityName}}Dao() : base()
        {
            InsertProcedureName = StoredProcedureConstants.{{entityName}}Insert;
            UpdateProcedureName = StoredProcedureConstants.{{entityName}}Update;
            DeleteProcedureName = StoredProcedureConstants.{{entityName}}Delete;
            GetProcedureName = StoredProcedureConstants.{{entityName}}Get;
            ListProcedureName = StoredProcedureConstants.{{entityName}}List;
        }

        /// <summary>
        /// Converts a data row to an entity.
        /// </summary>
        protected override I{{entityName}}Entity ConvertDataRowToEntity(DataRow dataRow)
        {
            return new {{entityName}}Entity().ParseDataRow(dataRow);
        }
    }
}
`;

const template = `/*
* Description: This file is used to define the data access for the {{entityName}} entity.
* This file is generated by the JFW Code Generator from a template file.
* Only the methods that are not defined in the base class should be added to this file.
* Author: ${authorFullName}.
* History:
* - ${currentDate}: Created - ${authorDevCode}.
*/

using Jfw.DataAccess.Interfaces;

namespace Jfw.DataAccess.Implements
{
    public partial class {{entityName}}Dao : I{{entityName}}Dao
    {
        // Adds custom methods here.
    }
}
`;

module.exports = { template, templateAuto, replacements };
