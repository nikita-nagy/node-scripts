const { authorFullName, currentDate, authorDevCode } = require("./variables");

const templateDefinition = {
  className: "ClassName",
};

const constructorTemplate = `/*
* Description: This file is used to define the constructors for the {{className}} class.
* This file is generated by the JFW Code Generator from a template file.
* Feel free to modify this file as needed.
* Author: ${authorFullName}.
* History:
* - ${currentDate}: Created - ${authorDevCode}.
*/

namespace Jfw.Core.MemoryClasses
{
    public partial class C{{className}}
    {
        #region Constructors
        /// <summary>
        /// Default constructor with default values.
        /// </summary>
        public C{{className}}() : base() { }
        #endregion
    }
}
`.replace(/\t/g, "    ");

const constantsTemplate = `/*
* Description: This file is used to define the constants and enums for the {{className}} class.
* This file is generated by the JFW Code Generator from a template file.
* Feel free to modify this file as needed.
* Author: ${authorFullName}.
* History:
* - ${currentDate}: Created - ${authorDevCode}.
*/

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

// We put the constants and enums in this file so that we can use them in the other parts of the {{className}} class.
namespace Jfw.Core.MemoryClasses
{
\tpublic partial class C{{className}}
\t{
\t\t#region Constants
\t\tpublic const string EntityName = "{{className}}";
\t\tpublic const int EntityCode = (int)Models.EntityCode.{{className}};

\t\t// We put the default values related to {{className}} here.
\t\t#region Default Values
\t\t#endregion

\t\t// We put the message strings related to {{className}} here.
\t\t#region Messages

\t\t// csharpier-ignore-start
\t\t/// <summary>
\t\t/// This class contains the messages for the {{className}} class.
\t\t/// </summary>
\t\tpublic static class Messages
\t\t{
\t\t\t/// <summary>
\t\t\t/// This is the detail of the error message - Unhandled error code.
\t\t\t/// </summary>
\t\t\tpublic const string UnknownErrorCodeDetails = "The error code is not defined in the {{className}} class.";
\t\t}
\t\t// csharpier-ignore-end

\t\t#endregion

\t\t// We put the regular expressions related to {{className}} here.
\t\t#region Regular Expressions
\t\t#endregion

\t\t#endregion
\t}

\t#region Enums
\t#endregion
}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
`.replace(/\t/g, "    ");

const exceptionTemplate = `/*
* Description: This file is used to define the exception classes for the {{className}} class.
* This file is generated by the JFW Code Generator from a template file.
* Feel free to modify this file as needed.
* Author: ${authorFullName}.
* History:
* - ${currentDate}: Created - ${authorDevCode}.
*/

namespace Jfw.Core.MemoryClasses { }
`;

const overrideTemplate = `/*
* Description: This file is used to define the override methods for the {{className}} class.
* This file is generated by the JFW Code Generator from a template file.
* Feel free to modify this file as needed.
* Author: ${authorFullName}.
* History:
* - ${currentDate}: Created - ${authorDevCode}.
*/

namespace Jfw.Core.MemoryClasses
{
    public partial class C{{className}}
    {
        /// <inheritdoc/>
        protected override void SetDefaultValues()
        {
        }
    }
}
`;

const errorsTemplate = `/*
* Description: This file is used to define the error handling methods and error mappings for the {{className}} class.
* This file is generated by the JFW Code Generator from a template file.
* Feel free to modify this file as needed.
* Author: ${authorFullName}.
* History:
* - ${currentDate}: Created - ${authorDevCode}.
*/

using Jfw.Core.Enums;
using Jfw.Core.MemoryClasses;

namespace Jfw.Core.MemoryClasses
{
\tpublic partial class C{{className}}
\t{
\t\t/// <summary>
\t\t/// Sets the message information for the given error code in the context of {{className}}.
\t\t/// </summary>
\t\t/// <param name="subcode">The error subcode.</param>
\t\t/// <param name="error">The error object.</param>
\t\t/// <returns>A CError object.</returns>
\t\tinternal static void SetMessageInformation(int subcode, ref CError error)
\t\t{
\t\t\tswitch (subcode)
\t\t\t{
\t\t\t\tdefault:
\t\t\t\t\terror.Details = Messages.UnknownErrorCodeDetails;
\t\t\t\t\terror.LogLevel = JfwLogLevel.Critical;
\t\t\t\t\tbreak;
\t\t\t}
\t\t}
\t}

\t/// <summary>
\t/// This enum contains the error codes for the {{className}} class.
\t/// </summary>
\tpublic enum {{className}}ErrorCode : int
\t{
\t}
}
`.replace(/\t/g, "    ");

const validationsTemplate = `/*
* Description: This file is used to define the property validation methods for the {{className}} class.
* This file is generated by the JFW Code Generator from a template file.
* Feel free to modify this file as needed.
* Author: ${authorFullName}.
* History:
* - ${currentDate}: Created - ${authorDevCode}.
*/

namespace Jfw.Core.MemoryClasses
{
    public partial class C{{className}}
    {
        #region Property Validation Methods
        // TODO: Add property validation methods here
        #endregion

        /// <inheritdoc />
        public override bool IsValid()
        {
            // TODO: Override this method if you want to add more validations.
            return base.IsValid();
        }

        /// <inheritdoc />
        public override bool CheckValidations()
        {
            // TODO: Override this method if you want to add more validations.
            return base.CheckValidations();
        }
    }
}
`;

const templates = [
  {
    template: constructorTemplate,
    outputSuffix: "",
  },
  {
    template: constantsTemplate,
    outputSuffix: ".Constants",
  },
  {
    template: exceptionTemplate,
    outputSuffix: ".Exceptions",
  },
  {
    template: errorsTemplate,
    outputSuffix: ".Errors",
  },
  {
    template: overrideTemplate,
    outputSuffix: ".Overrides",
  },
  {
    template: validationsTemplate,
    outputSuffix: ".Validations",
  },
];

module.exports = {
  templates,
  templateDefinition,
};
