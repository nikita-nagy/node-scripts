const { authorFullName, authorDevCode, currentDate } = require("./variables");

const defaultUsings = ["System.Collections.Generic"];

const conditionTemplateDateTime = `\t\t\t// Checks if the {{columnNamePascal}} property is set and adds it to the parameters if it is.
\t\t\tif ({{columnNamePascal}}.HasValue && {{columnNamePascal}}.Value >= SqlDateTime.MinValue.Value)
\t\t\t{
\t\t\t\t_parameters.Add(ParameterName{{columnNamePascal}}, {{columnNamePascal}}.Value);
\t\t\t}`;

const conditionTemplateString = `\t\t\t// Checks if the {{columnNamePascal}} property is set and adds it to the parameters if it is.
\t\t\tif (!string.IsNullOrWhiteSpace({{columnNamePascal}}))
\t\t\t{
\t\t\t\t_parameters.Add(ParameterName{{columnNamePascal}}, {{columnNamePascal}});
\t\t\t}`;

const conditionTemplateEncrypted = `\t\t\t// Checks if the {{columnNamePascal}} property is set and adds it to the parameters if it is.
\t\t\tif (!string.IsNullOrWhiteSpace({{columnNamePascal}}))
\t\t\t{
\t\t\t\t_parameters.Add(ParameterName{{columnNamePascal}}, CryptographyHelper.Encrypt({{columnNamePascal}}));
\t\t\t}`;

const conditionTemplateOther = `\t\t\t// Checks if the {{columnNamePascal}} property is set and adds it to the parameters if it is.
\t\t\tif ({{columnNamePascal}}.HasValue)
\t\t\t{
\t\t\t\t_parameters.Add(ParameterName{{columnNamePascal}}, {{columnNamePascal}}.Value);
\t\t\t}`;

const definitionColumn = `\t\t/// <summary>
\t\t/// Gets or sets the @{{columnName}} parameter value.
\t\t/// </summary>
\t\t{{columnType}} {{columnNamePascal}} { get; set; }`;

const definitionParameter = `\t\tpublic const string ParameterName{{columnNamePascal}} = "{{columnName}}";`;
const definitionShortColumn = `\t\tpublic {{columnType}} {{columnNamePascal}} { get; set; }`;
const definitionListSetter = `\t\t/// <summary>
\t\t/// Sets the {{columnNamePascal}} property based on the given ids.
\t\t/// </summary>
\t\t/// <param name="ids">The ids to set.</param>
\t\tpublic void Set{{columnNamePascal}}(params long[] ids)
\t\t{
\t\t\tif (ids != null && ids.Length > 0)
\t\t\t{
\t\t\t\t{{columnNamePascal}} = string.Join(IdSeparator, ids);
\t\t\t}
\t\t}`;
const definitionListSetterGuid = `\t\t/// <summary>
\t\t/// Sets the {{columnNamePascal}} property based on the given ids.
\t\t/// </summary>
\t\t/// <param name="ids">The ids to set.</param>
\t\tpublic void Set{{columnNamePascal}}(params Guid[] ids)
\t\t{
\t\t\tif (ids != null && ids.Length > 0)
\t\t\t{
\t\t\t\t{{columnNamePascal}} = string.Join(IdSeparator, ids);
\t\t\t}
\t\t}`;
const definitionSetterInterface = `\t\t/// <summary>
\t\t/// Sets the {{columnNamePascal}} property based on the given ids.
\t\t/// </summary>
\t\t/// <param name="ids">The ids to set.</param>
\t\tvoid Set{{columnNamePascal}}(params long[] ids);`;
const definitionSetterGuidInterface = `\t\t/// <summary>
\t\t/// Sets the {{columnNamePascal}} property based on the given ids.
\t\t/// </summary>
\t\t/// <param name="ids">The ids to set.</param>
\t\tvoid Set{{columnNamePascal}}(params Guid[] ids);`;

const definitions = {
  Column: definitionColumn,
  ShortColumn: definitionShortColumn,
  Parameter: definitionParameter,
  SetterInterface: definitionSetterInterface,
  SetterGuidInterface: definitionSetterGuidInterface,
  ListSetter: definitionListSetter,
  ListSetterGuid: definitionListSetterGuid,
  ConditionDateTime: conditionTemplateDateTime,
  ConditionString: conditionTemplateString,
  ConditionEncrypted: conditionTemplateEncrypted,
  ConditionOther: conditionTemplateOther,
};

const templateReplacements = {
  EntityName: "EntityName",
  Usings: "",
  SetterDefinitions: "// SetterDefinitions",
  ColumnDefinitions: "// ColumnDefinitions",
  ShortColumnDefinitions: "// ShortColumnDefinitions",
  ParameterNameDefinitions: "// ParameterNames",
  InheritedInterfaces: ": IFilter",
  ConditionDefinitions: "// Conditions",
  ListSetters: "// ListSetters",
};

const template = `/*
* Description: This file is used to define the filter for the {{EntityName}}s in the system.
* This file is auto-generated by the JFW Code Generator.
* You should not modify this file directly. Instead, you should modify the template file.
* Author: ${authorFullName}.
* History:
* - ${currentDate}: Created - ${authorDevCode}.
*/

{{Usings}}namespace Jfw.Models.Filters
{
    /// <summary>
    /// This defines the interface for the {{EntityName}}Filter class.<br/>
    /// It is used to filter the {{EntityName}}s in the system.
    /// </summary>
    public partial interface I{{EntityName}}Filter{{InheritedInterfaces}}
    {
{{ColumnDefinitions}}

{{SetterDefinitions}}
    }

    /// <summary>
    /// This represents a filter for the {{EntityName}}s in the system.
    /// </summary>
    public partial class {{EntityName}}Filter : BaseFilter, I{{EntityName}}Filter
    {
{{ParameterNameDefinitions}}

{{ShortColumnDefinitions}}

{{ListSetters}}

        public override IDictionary<string, object> ToParameters()
        {
            // Calls the base class to get the base parameters.
            base.ToParameters();

{{ConditionDefinitions}}

            // Returns the parameters.
            return _parameters;
        }
    }
}

`;

module.exports = {
  defaultUsings,
  template,
  templateReplacements,
  definitions,
};
